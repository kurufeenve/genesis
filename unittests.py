import unittest
from serializer import *
from block import *

class TestWallet(unittest.TestCase):

    def test_privateKey_to_publicKey(self):
        
        w = Wallet()
        self.assertEqual(w.privateKeyToPublicKey('0C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D'), '04D0DE0AAEAEFAD02B8BDC8A01A1B8B11C696BD3D66A2C5F10780D95B7DF42645CD85228A6FB29940E858E7E55842AE2BD115D1ED7CC0E82D934E929C97648CB0A')
        
    def test_pubKeyToAddr(self):
        
        w = Wallet()
        self.assertEqual(w.pubKeyToAddress('04D0DE0AAEAEFAD02B8BDC8A01A1B8B11C696BD3D66A2C5F10780D95B7DF42645CD85228A6FB29940E858E7E55842AE2BD115D1ED7CC0E82D934E929C97648CB0A'), '1GAehh7TsJAHuUAeKZcXf5CnwuGuGgyX2S')
    
    def test_base58CheckEncode(self):
        
        w = Wallet()
        self.assertEqual(w.base58CheckEncode('80', '0C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D'), '5HueCGU8rMjxEXxiPuD5BDku4MkFqeZyd4dZ1jvhTVqvbTLvyTJ')

class TestTxValidator(unittest.TestCase):

    def test_addrVal(self):
        
        V = Validator()
        self.assertTrue(V.addrVal('1GAehh7TsJAHuUAeKZcXf5CnwuGuGgyX2S'))

    def test_senderAddrVal(self):
        
        V = Validator()
        self.assertTrue(V.senderAddrVal('04D0DE0AAEAEFAD02B8BDC8A01A1B8B11C696BD3D66A2C5F10780D95B7DF42645CD85228A6FB29940E858E7E55842AE2BD115D1ED7CC0E82D934E929C97648CB0A', '1GAehh7TsJAHuUAeKZcXf5CnwuGuGgyX2S'))

    def test_signatureVal(self):
        
        V = Validator()
        w = Wallet()
        signature, pk = w.signMessage('0C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D', 'message')
        self.assertTrue(V.signatureVal('message'.encode(), '04D0DE0AAEAEFAD02B8BDC8A01A1B8B11C696BD3D66A2C5F10780D95B7DF42645CD85228A6FB29940E858E7E55842AE2BD115D1ED7CC0E82D934E929C97648CB0A', signature))

class TestTransaction(unittest.TestCase):

    def test_txHashCalc(self):
        
        tx = Transaction('1to4yvjbUSJvUYKJ6JertB7nUBJvJEQXG', '1GAehh7TsJAHuUAeKZcXf5CnwuGuGgyX2S', '0001')
        self.assertEqual(tx.txHashCalc(), 'c24de1628e2fc80b62d9bc6ef1c5035b02f9a9fc2d3052de2e2739aee94af31c')

# class TestSerializer(unittest.TestCase):

#     def test_serialize(self):
#         self.maxDiff = None
#         tx = Transaction('1to4yvjbUSJvUYKJ6JertB7nUBJvJEQXG', '1GAehh7TsJAHuUAeKZcXf5CnwuGuGgyX2S', '0001')
#         txHash = tx.txHashCalc()
#         tx.signature, tx.pubkey = Wallet.signMessage(Wallet, '7f83b228d628e9f49fc64457149039951f7982065fea88f7a31e483b865040f1', txHash)
#         tx.signature = codecs.decode(binascii.hexlify(tx.signature))
#         self.assertEqual(Serializer.serialize(Serializer, tx), '0001001to4yvjbUSJvUYKJ6JertB7nUBJvJEQXG01GAehh7TsJAHuUAeKZcXf5CnwuGuGgyX2SC39780790B9BA856FDF3E7B24F70BFBEACD4B9F62A0B38B1D1EDCD7DCB857BAE1B9FCA6828994A0E1D3FAF2C77FB0B3E446F7F7BA841426EA2B617104945935D5920A8F8A6BB8D5BFAD37349B6E2F1D98E6AFA4BBACE919FCBBD017042AEEFD4B3AE4B9FA71E2EDAD8DA70B4079EFCFA09AE8B563C0DB05486607CF763E4F295')

class TestMerkleRoot(unittest.TestCase):

    def test_merkle_root(self):
        
        self.assertEqual(merkle_root(['aa', 'bb', 'cc', 'dd', 'ee', 'nn', 'xx']), 'cefef459a8cc2391e1c3a049c4ee0e2bb715ada93734356ad540619e0bbb7364')

class TestBlock(unittest.TestCase):

    def test_txValidator(self):

        stxs = ['00010113FCNkh8zWtUdSrXiQCh6fPkyaRQ7sTEF015ZNANyRPHNmp3P7aNuazXi1DoSZwdt9Pu0ED391306B1C83A1D2D419D8040D8E61B4A0F63AC50E00323D32B64A2B2E0C4723BFEE8E51EB4F28BA14E5854E76FB84C188027CA6C3C583965BE510AA90FB90843A6160D617502558081B6E7C4E56FB70835182A6373CCDE67E5D5E1DFE51BA3FA86577247DBC6A13494280B5F248CC9A847E1FC86E614E69819D5E063B888E', '00010113FCNkh8zWtUdSrXiQCh6fPkyaRQ7sTEF001CskVPrVrqYLm2WwQVqX6ozMviMbGdriE0ED391306B1C83A1D2D419D8040D8E61B4A0F63AC50E00323D32B64A2B2E0C4723BFEE8E51EB4F28BA14E5854E76FB84C188027CA6C3C583965BE510AA90FB901F19FCA6052593CB45034A1E5ABD75E7526657EB75882C6F47B91479F2629766980EF531BFA8A0195A5AA14C888181A47CC068FEF14FC1019635542EAF3FFD2B', '00010113FCNkh8zWtUdSrXiQCh6fPkyaRQ7sTEF015ZNANyRPHNmp3P7aNuazXi1DoSZwdt9Pu0ED391306B1C83A1D2D419D8040D8E61B4A0F63AC50E00323D32B64A2B2E0C4723BFEE8E51EB4F28BA14E5854E76FB84C188027CA6C3C583965BE510AA90FB905B4DD01B701B65DE60328CB93A6A162201A160FFEFA9A5DB4C2F5E65904F9BC60CFA322F6153E9C716D07BA7B831D25E31875BA7368E63F16B32D6477135D877']
        B = Block('1549853481', '00dad7561b8d9a67a9e55a98eca2a2beaf2ee9a8e10534129e78047572825b84', stxs)
        self.assertTrue(B.txValidator(stxs))
    
    def test_blockHashCalc(self):

        stxs = ['00010113FCNkh8zWtUdSrXiQCh6fPkyaRQ7sTEF015ZNANyRPHNmp3P7aNuazXi1DoSZwdt9Pu0ED391306B1C83A1D2D419D8040D8E61B4A0F63AC50E00323D32B64A2B2E0C4723BFEE8E51EB4F28BA14E5854E76FB84C188027CA6C3C583965BE510AA90FB90843A6160D617502558081B6E7C4E56FB70835182A6373CCDE67E5D5E1DFE51BA3FA86577247DBC6A13494280B5F248CC9A847E1FC86E614E69819D5E063B888E', '00010113FCNkh8zWtUdSrXiQCh6fPkyaRQ7sTEF001CskVPrVrqYLm2WwQVqX6ozMviMbGdriE0ED391306B1C83A1D2D419D8040D8E61B4A0F63AC50E00323D32B64A2B2E0C4723BFEE8E51EB4F28BA14E5854E76FB84C188027CA6C3C583965BE510AA90FB901F19FCA6052593CB45034A1E5ABD75E7526657EB75882C6F47B91479F2629766980EF531BFA8A0195A5AA14C888181A47CC068FEF14FC1019635542EAF3FFD2B', '00010113FCNkh8zWtUdSrXiQCh6fPkyaRQ7sTEF015ZNANyRPHNmp3P7aNuazXi1DoSZwdt9Pu0ED391306B1C83A1D2D419D8040D8E61B4A0F63AC50E00323D32B64A2B2E0C4723BFEE8E51EB4F28BA14E5854E76FB84C188027CA6C3C583965BE510AA90FB905B4DD01B701B65DE60328CB93A6A162201A160FFEFA9A5DB4C2F5E65904F9BC60CFA322F6153E9C716D07BA7B831D25E31875BA7368E63F16B32D6477135D877']
        B = Block('1549853481', '00dad7561b8d9a67a9e55a98eca2a2beaf2ee9a8e10534129e78047572825b84', stxs)
        B.nonce = 366
        blockHash, root = B.blockHashCalc(0)
        self.assertEqual(blockHash, '00eef011f3c415150eb4064f3b13d417db932e8fd597816cbe6e1e2255ff4cff')

if __name__ == '__main__':
    unittest.main()
